{"componentChunkName":"component---src-templates-post-tsx","path":"/React-login/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>react를 처음으로 입문한다면 흔하디 흔한 투두리스트, 카운터 예제를 가장 많이 보게된다.<br>\n필자도 react를 투두리스트, 카운터와 같은 예제로 실습을 진행했다.<br>\n하지만 실제 프로젝트에 들어가면 서버와 비동기 통신을 해야하고, 상태 관리 등등 많은 개념이 필요해진다.<br>\n좀 더 편한 상태 관리를 위해 redux를 도입하고 비동기 통신을 위해 redux-saga를 이용하게 됐다.<br>\n하지만 모든 서비스에 필요한 흔하디 흔한 로그인, 회원가입 예제가 없어 처음에 감을 잡기 힘들어 조금이나마 도움이 되기 위해 포스팅하게 됐다.  </p>\n<p>간단한 설명만 진행하기 위해 프로젝트 구조화, 예제 코드는 간단하게만 작성한다. </p>\n<hr>\n<h3 id=\"redux-action-만들기\" style=\"position:relative;\"><a href=\"#redux-action-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"redux action 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux action 만들기</h3>\n<p>최근에는 redux의 action, reducer등을 하나의 파일에서 작성하는 DUCKS 패턴을 많이 사용하지만<br>\n필자는 모두 분리 시켰다.<br>\nredux를 사용한다면 어떠한 변화를 일으키기 위해서는 action이라는 것을 발생시켜줘야한다.<br>\n액션은 하나의 객체로 표현되면 type이외의 값은 개발자 마음대로 설정할 수 있다.\n필자는 로그인을 위해 필요한 액션을 SIGNIN<em>REQUEST, SIGNIN</em>SUCCESS, SIGNIN_FAIL 3가지로 만들었다.</p>\n<p>src/redux/actions 디렉토리에 auth.js을 생성한다.<br>\n액션 생성 함수를 직접 객체를 리턴하는 함수로 작성해도 되지만<br>\nredux-actions 모듈의 createAction 함수를 사용하면 좀 더 간결하고 쉽게 액션을 생성 할 수 있다.<br>\ncreatAction으로 액션을 생성할 때 첫번째 인자는 액션 타입, 두번째 인자는 이외의 데이터를 자유롭게 객체로 넣을 수 있다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsxharmony\"><pre class=\"language-jsxharmony\"><code class=\"language-jsxharmony\">import { createAction } from &#39;redux-actions&#39;;\n\n// actions\nexport const SIGNIN_REQUEST = &#39;auth/SIGNIN_REQUEST&#39;;\nexport const SIGNIN_SUCCESS = &#39;auth/SIGNIN_SUCCESS&#39;;\nexport const SIGNIN_FAIL = &#39;auth/SIGNIN_FAIL&#39;;\n\n// create actions\nexport const signInRequestAction = createAction(SIGNIN_REQUEST, user =&gt; (user));\nexport const signInSuccessAction = createAction(SIGNIN_SUCCESS, token =&gt; (token));\nexport const signInFailAction = createAction(SIGNIN_FAIL);</code></pre></div>\n<h3 id=\"redux-reducer-만들기\" style=\"position:relative;\"><a href=\"#redux-reducer-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"redux reducer 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux reducer 만들기</h3>\n<p>redux action을 dispatch시켜 상태에 어떠한 변화를 주고 싶다면<br>\nredux reducer에서 실질적으로 state값을 변경시키는 작업을 진행한다.\n리덕스를 사용할 때 여러개의 리듀서를 만들고 이를 하나의 루트 리듀서(Root Reducer)로 만들 수 있다.</p>\n<p>src/redux/reducer/auth.js를 생성한다.<br>\n위에서 3가지로 구분한 액션별로 변경될 state값을 action객체에서 받아 불변성을 유지하면 넣어주면 된다.<br>\nreducer를 구현할 때 switch문으로 많이들 작성하지만 redux-actions 모듈의 handleActions를 사용하게 되면 좀 더 간결한 코드를 작성할 수 있다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsxharmony\"><pre class=\"language-jsxharmony\"><code class=\"language-jsxharmony\">import handleActions from &quot;redux-actions/es/handleActions&quot;\nimport {\n    SIGNIN_FAIL,\n    SIGNIN_SUCCESS,\n    SIGNIN_REQUEST\n} from &quot;../action/auth&quot;\n\n// state initialize\nconst initialState = {\n    loading : false,\n    payload : {\n        token : &#39;&#39;\n    },\n}\n\n// reducer\nexport default handleActions({\n    [SIGNIN_REQUEST]: (state, action) =&gt; ({\n        ...state,\n        loading: true\n    }),\n    [SIGNIN_SUCCESS]: (state, action) =&gt; ({\n        ...state,\n        loading: false,\n        payload: {\n            token: action.payload.token\n        }\n    }),\n    [SIGNIN_FAIL]: (state, action) =&gt; ({\n        ...state\n    })\n}, initialState);</code></pre></div>\n<h3 id=\"root-reducer로-여러개의-reducer-합치기\" style=\"position:relative;\"><a href=\"#root-reducer%EB%A1%9C-%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-reducer-%ED%95%A9%EC%B9%98%EA%B8%B0\" aria-label=\"root reducer로 여러개의 reducer 합치기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>root reducer로 여러개의 reducer 합치기</h3>\n<p>src/redux/reducer/index.js를 생성한다.<br>\n해당 파일에서는 여러개의 reducer를 root reducer로 합치는 작업을 한다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsxharmony\"><pre class=\"language-jsxharmony\"><code class=\"language-jsxharmony\">import { combineReducers } from &quot;redux&quot;\nimport auth from &quot;./auth&quot;\n\nexport default combineReducers({\n    auth\n});</code></pre></div>\n<h3 id=\"saga-구현하기\" style=\"position:relative;\"><a href=\"#saga-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"saga 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>saga 구현하기</h3>\n<p>redux-saga는 제너레이터 함수를 구현하여 사용한다.<br>\nsrc/redux/saga/authSaga.js 파일을 생성한다.  </p>\n<p>해당 예제 saga 제너레이터 함수에서는 api 호출 함수가 구현되어있다고 가정한다.<br>\nredux-saga모듈의 call 함수를 통해 특정 함수를 비동기로 호출할 수 있다.<br>\nput 함수로 액션을 디스패치할 수 있다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsxharmony\"><pre class=\"language-jsxharmony\"><code class=\"language-jsxharmony\">import { call, put, takeEvery } from &quot;redux-saga/effects&quot;\nimport { requestSignIn } from &quot;../apis/auth&quot;\nimport { SIGNIN_REQUEST } from &quot;../redux/action/auth&quot;\nimport { signInSuccessAction, signInFailAction } from &quot;../redux/action/auth&quot;\n\nfunction* postSignInSaga(action) {\n    try {\n        const email = action.payload.id;\n        const password = action.payload.pw;\n        const result = yield call(requestSignIn, email, password); // call 을 사용하면 특정 함수를 호출하고, 결과물이 반환 될 때까지 기다려줄 수 있다.\n        if(result.message === &quot;SUCCESS&quot;) {\n            yield put(signInSuccessAction({token : result.data.token})); // 성공 액션 디스패치\n        } else {\n            yield put(signInFailAction({error: &quot;로그인 실패&quot;})); // 실패 액션 디스패치\n        }\n    } catch (e) {\n        yield put(signInFailAction({error: e.message})); // 실패 액션 디스패치\n    }\n}\n\n// 사가들을 합치기\nexport function* postsSaga() {\n    yield takeEvery(SIGNIN_REQUEST, postSignInSaga);\n}</code></pre></div>\n<h3 id=\"root-saga로-여러개의-saga-합치기\" style=\"position:relative;\"><a href=\"#root-saga%EB%A1%9C-%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-saga-%ED%95%A9%EC%B9%98%EA%B8%B0\" aria-label=\"root saga로 여러개의 saga 합치기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>root saga로 여러개의 saga 합치기</h3>\n<p>src/redux/saga/index.js 파일을 생성하여 여러개의 saga를 root saga로 합쳐준다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsxharmony\"><pre class=\"language-jsxharmony\"><code class=\"language-jsxharmony\">import { all } from &quot;../../node_modules/redux-saga/effects&quot;\nimport { postsSaga } from &quot;./authSaga&quot;\n\nexport default function* rootSaga() {\n    yield all([\n      postsSaga(),\n    ]);\n}</code></pre></div>\n<h3 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>redux action을 생성하는 코드  </li>\n<li>변화된 action을 감지하여 state를 변경해주는 redux reducer 코드</li>\n<li>서버로부터 로그인 통신을 하기위한 redux-saga 미들웨어 코드\n를 작성했다.<br>\n아직까지는 이 모든게 하나로 연결되어 있지 않다!<br>\n왜냐하면 아직 이 모든 로직이 돌 수 있게 해주는 action을 컴포넌트에 붙이지 않았기 때문이다.<br>\n다음 포스팅에서 SIGNIN_REQUEST 액션을 디스패치하는 코드와 간단한 로그인 컴포넌트를 만들 예정이다!<br>\n설명이 부족한 부분이 많아 앞으로 계속해서 수정할 예정이다!  </li>\n</ul>","excerpt":"개요 react를 처음으로 입문한다면 흔하디 흔한 투두리스트, 카운터 예제를 가장 많이 보게된다. 필자도 react…","tableOfContents":"<ul>\n<li><a href=\"/React-login/#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"/React-login/#redux-action-%EB%A7%8C%EB%93%A4%EA%B8%B0\">redux action 만들기</a></li>\n<li><a href=\"/React-login/#redux-reducer-%EB%A7%8C%EB%93%A4%EA%B8%B0\">redux reducer 만들기</a></li>\n<li><a href=\"/React-login/#root-reducer%EB%A1%9C-%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-reducer-%ED%95%A9%EC%B9%98%EA%B8%B0\">root reducer로 여러개의 reducer 합치기</a></li>\n<li><a href=\"/React-login/#saga-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\">saga 구현하기</a></li>\n<li><a href=\"/React-login/#root-saga%EB%A1%9C-%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-saga-%ED%95%A9%EC%B9%98%EA%B8%B0\">root saga로 여러개의 saga 합치기</a></li>\n<li><a href=\"/React-login/#%EC%9A%94%EC%95%BD\">요약</a></li>\n</ul>","fields":{"slug":"/React-login/"},"frontmatter":{"title":"[React, Redux, Redux-saga] 흔하디 흔한 투두리스트 아니고 로그인 - 1","date":"May 11, 2020","tags":["react","redux-saga","redux"],"keywords":["Jay's Dev Blog ","Jae Hyun"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/React-login/","series":[],"lastmod":"0001-01-01"}}}