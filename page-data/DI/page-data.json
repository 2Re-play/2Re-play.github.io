{"componentChunkName":"component---src-templates-post-tsx","path":"/DI/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"spring\" style=\"position:relative;\"><a href=\"#spring\" aria-label=\"spring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SPRING</h1>\n<h2 id=\"dependency-injection\" style=\"position:relative;\"><a href=\"#dependency-injection\" aria-label=\"dependency injection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependency Injection</h2>\n<h3 id=\"dependency-injection-이란\" style=\"position:relative;\"><a href=\"#dependency-injection-%EC%9D%B4%EB%9E%80\" aria-label=\"dependency injection 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependency Injection 이란?</h3>\n<p>A클래스에서 B클래스에게 의존(depend)을 할 경우, 내부에 존재하는 필드(멤버 변수)에게 외부에서 값을 주입시켜주는 것을 말한다.\n위에 말로는 설명이 부족하다. 아래 코드를 보며 이해해보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PetOwner</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AnimalType</span> animal<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PetOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 의존성 주입에서는 new 생성자를 사용하지 않는다. */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드는 의존성주입이 아닌 의존성 주입을 이해하기 위한 코드이다.<br>\n위에 코드를 보면 현재 PetOwner()객체는 AnimalType객체에게 의존하고있다.\n이러한 의존을 <strong>의존성</strong>이라고 하며, animal이라는 필드에게 값을 외부에서 넣어주는 것을 <strong>주입</strong>이라고한다.<br>\n이 말을 합쳐 <strong>의존성 주입, Dependency Injection</strong>이라고 말한다.<br>\nDI는 Spring framework에 의해 지원하는 디자인패턴이다.<br>\nDI를 통해 많은 객체들 사이의 coupling을 줄이고 framework에 의해 동적으로 의존성을 주입할 수 있다.</p>\n<p>이제 좀 더 <strong>의존성 주입</strong>에 대해 알아보자.  </p>\n<div>\n<img width=\"300\" height=\"250\" src=\"https://user-images.githubusercontent.com/22942313/66917998-60e6ba00-f059-11e9-8173-66c7914215be.png\">\n</div>\n<p>위 그림을 보게되 Spring Container에서 각각의 객체 Bean A와 Bean B를 생성하고 A객체에서 B객체 사이에 외부에서 <strong>의존성 주입</strong>을한다.\n이러한 설정은 위 그림에서는 xml config 파일 설정으로 한다.<br>\n위 그림을 코드로 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AnimalType</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AnimalType</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   \n    <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PetOwner</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AnimalType</span> animal<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PetOwner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnimalType</span> animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>animal <span class=\"token operator\">=</span> animal<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bean Container에서는 위와 같이 Cat, Dog 객체를 생성한 후 PetOwner객체로 AnimalType의 animal필드에게 의존성주입을 하게된다.</p>\n<h3 id=\"spring-container\" style=\"position:relative;\"><a href=\"#spring-container\" aria-label=\"spring container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Container</h3>\n<p>Spring Container는 Spring 프레임워크의 핵심 컴포넌트이다.\n주요기능으로 1. 객체를 생성 및 관리 2.객체의 의존성 주입이 있다.<br>\nSpring Container는 xml과 annotations등으로 표현할 수 있다.\n객체를 관리하기 위해서 Container는 DI를 사용한다.</p>\n<p>또한, Spring Container는 2가지의 타입이 있는데</p>\n<ul>\n<li>BeanFactory</li>\n<li>ApplicationContext<br>\n로 나뉜다.  </li>\n</ul>\n<div>\n<img width=\"400\" height=\"250\" alt=\"img2\" src=\"https://user-images.githubusercontent.com/22942313/66918015-6a702200-f059-11e9-9f54-f16c559b995c.png\">\n</div>\nApplicationContext&#xB97C; &#xC0AC;&#xC6A9;&#xD558;&#xC5EC; container&#xB97C; &#xC0DD;&#xC131;&#xD560; &#xB54C;&#xB294; &#xC544;&#xB798;&#xC758; &#xCF54;&#xB4DC;&#xB97C; &#xC0AC;&#xC6A9;&#xD55C;&#xB2E4;.\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[xml config path]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">PetOwner</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PetOwner</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[bean id]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>new ClassPathXmlApplicationContext()의 인자로 xml config파일 경로를 넣어주고, context.getBean()메소드를 통해 bean의 id를 인자로 넘겨\nbean을 받아온다.  </p>\n<h3 id=\"spring-container와-dependecy-injection-순서도\" style=\"position:relative;\"><a href=\"#spring-container%EC%99%80-dependecy-injection-%EC%88%9C%EC%84%9C%EB%8F%84\" aria-label=\"spring container와 dependecy injection 순서도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Container와 Dependecy Injection 순서도</h3>\n<div>\n<img width=\"400\" height=\"350\" alt=\"img3\" src=\"https://user-images.githubusercontent.com/22942313/66918153-adca9080-f059-11e9-9a56-b66015b81659.png\">\n</div>\n&#xC704; &#xADF8;&#xB9BC;&#xC744; &#xC124;&#xBA85;&#xD558;&#xC790;&#xBA74; main&#xD568;&#xC218;&#xAC00; &#xD638;&#xCD9C;&#xB41C; &#xC774;&#xD6C4;&#xC5D0; ApplicationContext&#xAC00; container&#xB97C; &#xC0DD;&#xC131;&#xD558;&#xACE0; &#xC0DD;&#xC131;&#xB41C; container&#xAC00; Dog&#xAC1D;&#xCCB4;&#xC640; Cat&#xAC1D;&#xCCB4;&#xB97C; &#xC0DD;&#xC131;&#xD55C;&#xB2E4;. &#xC774;&#xD6C4;&#xC5D0; PetOwneranimal &#xD074;&#xB798;&#xC2A4;&#xC5D0;&#xC11C; &#xC758;&#xC874;&#xC131;&#xC8FC;&#xC785;&#xC744; &#xD55C;&#xB2E4;.\n<h3 id=\"dependency-injection의-장점\" style=\"position:relative;\"><a href=\"#dependency-injection%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"dependency injection의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependency Injection의 장점</h3>\n<ul>\n<li>\n<p>의존성을 줄일 수 있다.</p>\n<ul>\n<li>의존성의 감소는 모든 코드를 수정해야하는 번거러운 일 감소에 비례한다.(즉, DI를 통해 많은 코드를 수정하지 않을 수 있다.)</li>\n</ul>\n</li>\n<li>\n<p>코드의 재사용성</p>\n<ul>\n<li>어떠한 인터페이스가 다른 곳에서도 구현이 필요할 경우 DI를 통해 코드를 변경할 필요가 없다.</li>\n</ul>\n</li>\n<li>읽기 쉬운 코드를 만들어준다.</li>\n<li>테스트에 용이하다.</li>\n<li>결합도(coupling)을 줄이면서 확장성을 높일 수 있다.<br>\n등등 정말 수도 없이 많은 장점이 있다.</li>\n</ul>","excerpt":"SPRING Dependency Injection Dependency Injection 이란? A클래스에서 B클래스에게 의존(depend…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/DI/#spring\">SPRING</a></p>\n<ul>\n<li>\n<p><a href=\"/DI/#dependency-injection\">Dependency Injection</a></p>\n<ul>\n<li><a href=\"/DI/#dependency-injection-%EC%9D%B4%EB%9E%80\">Dependency Injection 이란?</a></li>\n<li><a href=\"/DI/#spring-container\">Spring Container</a></li>\n<li><a href=\"/DI/#spring-container%EC%99%80-dependecy-injection-%EC%88%9C%EC%84%9C%EB%8F%84\">Spring Container와 Dependecy Injection 순서도</a></li>\n<li><a href=\"/DI/#dependency-injection%EC%9D%98-%EC%9E%A5%EC%A0%90\">Dependency Injection의 장점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/DI/"},"frontmatter":{"title":"Spring - Dependency Injection","date":"Oct 16, 2010","tags":["spring"],"keywords":["Jay's Dev Blog ","Jae Hyun"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/DI/","series":[],"lastmod":"0001-01-01"}}}